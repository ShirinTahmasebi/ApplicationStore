{"version":3,"sources":["utils/getWeb3.js","App.js","registerServiceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","web3","Web3","currentProvider","console","log","provider","providers","HttpProvider","App","state","storageValue","accounts","contract","componentDidMount","_callee","Contract","instance","regenerator_default","a","wrap","_context","prev","next","sent","eth","getAccounts","truffleContract","SimpleStorageContract","setProvider","deployed","_this","setState","runExample","t0","alert","stop","this","_callee2","_this$state","response","_context2","set","from","get","toNumber","react_default","createElement","className","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.dfc50b5c.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", () => {\n      let web3 = window.web3;\n\n      // Checking if Web3 has been injected by the browser (Mist/MetaMask).\n      const alreadyInjected = typeof web3 !== \"undefined\";\n\n      if (alreadyInjected) {\n        // Use Mist/MetaMask's provider.\n        web3 = new Web3(web3.currentProvider);\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } else {\n        // Fallback to localhost if no web3 injection. We've configured this to\n        // use the development console's port by default.\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const Contract = truffleContract(SimpleStorageContract);\n      Contract.setProvider(web3.currentProvider);\n      const instance = await Contract.deployed();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.log(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.set(5, { from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.get();\n\n    // Update state with the result.\n    this.setState({ storageValue: response.toNumber() });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 37</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}